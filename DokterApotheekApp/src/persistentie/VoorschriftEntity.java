package persistentie;

import java.sql.Array;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.List;

import domein.Dokter;
import domein.Medicamenten;
import domein.Voorschrift;

public class VoorschriftEntity {
	
	
	
	
	private Connection connect = null;
    //private Statement statement = null;
    private PreparedStatement ps = null;
    //private ResultSet resultSet = null;
    
    private List<Voorschrift> vrschrftn;
	private Connection connection;
	private Statement statement;
	private ResultSet resultSet;
	private Calendar cal;
	private SimpleDateFormat f;
	private String sqlQuery;
    
    public VoorschriftEntity()
    {
      vrschrftn = new ArrayList<Voorschrift>();
      cal = new GregorianCalendar();
      f = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
    }
    
    public List<Voorschrift> geefVoorschriften()
	{
		vrschrftn = new ArrayList<Voorschrift>();
		try{	
			connection = ConnectieManager.getInstance().getconnection();	
			statement = connection.createStatement();
			//allleen voor select-statements
			resultSet = statement.executeQuery("SELECT * FROM voorschrift");	
			while (resultSet.next()) {
				//ResultSet auto_id_resultset = statement.getGeneratedKeys();
				//int id = resultSet.getInt("id");
				resultSet = statement.getGeneratedKeys();
				int id = resultSet.getInt("id");
				String beschrijving = resultSet.getString("beschrijving");
				int dokterId = resultSet.getInt("dokterId");
				int patId = resultSet.getInt("patiëntId");
				String medsString = resultSet.getString("medicament");
				Medicamenten med = Medicamenten.valueOf(medsString);
				
				vrschrftn.add(new Voorschrift(beschrijving, med, dokterId,patId));
			}
			resultSet.close();
			statement.close();
			connection.close();

		}
		catch (Exception e) {
			e.printStackTrace();
		}
		return vrschrftn;
	}
    
    public void createVoorschrift(String beschrijving, Medicamenten med,int dokterId, int patiëntId)
    {
    	try {
    		connection = ConnectieManager.getInstance().getconnection();	
			/*statement = connection.createStatement();
			
			
			statement.executeUpdate("INSERT INTO voorschrift(id, beschrijving, medicamenten, dokterId, patiëntId) "+
			        "VALUES ('"+beschrijving+"', '"+med.toString()+"', '"+dokterId+"', '"+patiëntId+"')",statement.RETURN_GENERATED_KEYS);*/
            
    		PreparedStatement preparedStatement = 
    			    connect.prepareStatement("INSERT INTO voorschrift(id, beschrijving, medicamenten, dokterId, patiëntId) VALUES(?,?,?,?)", 
    			    Statement.RETURN_GENERATED_KEYS);

    			preparedStatement.setString(2,beschrijving);                          
    			preparedStatement.setString(3, med.toString());
    			preparedStatement.setInt(4, dokterId);
    			preparedStatement.setInt(5, patiëntId);
    			

    			preparedStatement.executeUpdate();

    			ResultSet tableKeys = preparedStatement.getGeneratedKeys();
    			tableKeys.next();
    			int autoGeneratedID = tableKeys.getInt(1);
    		
    		
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	
    	
    	
    }
    
    //Wegens many-to-many relatie tussen dokter en patiënt, VOEG je best bij het maken van een dokter en patiënt
    //ook een toewijzing toe van een patiënt bij een dokter
	/*public void addRelation(int dokterID, int patiëntID){
		try {
			
			connection = ConnectieManager.getInstance().getconnection();
			sqlQuery = "INSERT INTO dokter_patiënt VALUES ('"+dokterID+"','"+patiëntID+"')";
			PreparedStatement stat = connection.prepareStatement(sqlQuery);
			stat.executeUpdate();	
			stat.close();
			connection.close();
			
		}catch (SQLException e) {
			e.printStackTrace();
		}
	}
    */
    
    
    public void delete(int id)
    {
    	try{	
			connection = ConnectieManager.getInstance().getconnection();	
			statement = connection.createStatement();
			statement.executeUpdate("DELETE FROM voorschrift WHERE id="+id);	
			
			
			statement.close();
			connection.close();

		}
		catch (Exception e) {
			e.printStackTrace();
		}
    	
    }
    
    public void update(int id, String beschrijving,Medicamenten med, int dokterId,int patId)
    {
    	try{	
			connection = ConnectieManager.getInstance().getconnection();	
			statement = connection.createStatement();
			statement.executeUpdate("UPDATE voorschrift SET beschrijving='"+beschrijving+"', medicament='"+med+"', dokterId='"+dokterId+"', patiëntId='"+patId+"'  WHERE id="+id);	
			
             
			statement.close();
			connection.close();

		}
		catch (Exception e) {
			e.printStackTrace();
		}
    	
    }
    
  
   /*private boolean checkQueryHasDuplicates()
   {
	   
	   String queryCheck = "SELECT count(*) FROM evenement T1 WHERE T1.beschrijving = (SElECT T2.beschrijving FROM evenement T2 )";
	   
	try {
		connection = ConnectieManager.getInstance().getconnection();
		ps = connection.prepareStatement(queryCheck);  
		
		final ResultSet resultSet = ps.executeQuery(queryCheck);
	   
		if(resultSet.next()) {
	       final int count = resultSet.getInt(1);
	       if(count<=1){
	    	   return false;
	       }
	   }
	} catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	   
	 
	   return true;
   }*/

	

}



