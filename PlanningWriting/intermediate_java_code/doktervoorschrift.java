// LegacyJ – PERCobol Java Source Code
//
// This is a cross-compiler generated Java source code file – whose original source
// was a COBOL program of the same name.
//
// If you want to switch from COBOL maintenance to Java maintenance, you must
// 1. edit this file as you see fit,
// 2. move the resultant file to the “java_source” folder, and
// 3. delete the originally named COBOL source file found there.
//
// This file requires percobol.jar, which is part of the LegacyJ runtime library.

import com.synkronix.cobol.*;

/**
 * PROGRAM-ID doktervoorschrift<br>
 * Compiled on 2017-02-06 at 18:32:40<br>
 *
 * Generated by PERCobol(TM) Cobol compiler bringing IT together<br>
 * PERCobol(TM) Copyright 1996-2009 <a href="http://www.LegacyJ.com">LegacyJ</a><br>
 * @version V4.1.60e
 */
@SuppressWarnings("all")
public class doktervoorschrift
implements CobolProgram, com.legacyj.api.Callable, com.legacyj.api.Cancelable
{
static public final String _programId="doktervoorschrift";

public String toString()
{
return "PROGRAM DOKTERVOORSCHRIFT ("+super.toString()+"):"+String.valueOf(_context);
}


static // initializer
{
Variable.completeInitialization();
}


@SuppressWarnings("all")
public class Fil implements Section
{
public String toString()
{
return "FILE SECTION";
}

public final Variable rapportlijn_OF_rapportrecord_OF_rapportbestand=new Variable();
public final Variable rapportrecord_OF_rapportbestand=new Variable();
public final Variable loglijn_OF_logrec_OF_logfile=new Variable();
public final Variable logrec_OF_logfile=new Variable();
public final seqFile rapportbestand=(seqFile)RecordFile.getSeqFile(_context,"DoktersVoorschriften.out");
public final seqFile logfile=(seqFile)RecordFile.getSeqFile(_context,"LINE:logfile.txt");


public void doDeclarations()
{
try
{
declarations();
}
catch(Exception _initializerException)
{
CobolException.runtimeError(_context,"INTERNAL ERROR: Cannot initialize variable storage for doktervoorschrift section 'Fil'",_initializerException);
}
}

public void declarations()
{
final Memory _memory=this._memory;
rapportlijn_OF_rapportrecord_OF_rapportbestand.declare(_memory,0,200,"rapportlijn",null,null,rapportrecord_OF_rapportbestand,null,null,0x00000000);
rapportrecord_OF_rapportbestand.declare(_memory,0,200,"rapportrecord",null,null,null,rapportlijn_OF_rapportrecord_OF_rapportbestand,null,0x00000000);
loglijn_OF_logrec_OF_logfile.declare(_memory,200,100,"loglijn",null,null,logrec_OF_logfile,null,null,0x00000000);
logrec_OF_logfile.declare(_memory,200,100,"logrec",null,null,null,loglijn_OF_logrec_OF_logfile,rapportrecord_OF_rapportbestand,0x00000000);

} // end declarations

private final Memory _memory=new Memory(300,"doktervoorschrift.Fil");

} // end Fil
public transient Fil fil=null; // instance accessor for data section


@SuppressWarnings("all")
public class Wrk implements Section
{
public String toString()
{
return "WORKING-STORAGE SECTION";
}


public boolean eof_OF_einde_bestand(boolean _setTrue) // Condition EOF OF EINDE-BESTAND
{
    return eof_OF_einde_bestand(_setTrue ? 1 : 0);
}

public boolean eof_OF_einde_bestand(int _setTrue) // Condition EOF OF EINDE-BESTAND
{
    if(_setTrue==1)
    {
        einde_bestand.move(_NCONSTANT_1);
        return true;
    }
    if(einde_bestand.compare(_NCONSTANT_1)==0) return true;

    return false;
}

public boolean eof_OF_einde_bestand()
{
    return eof_OF_einde_bestand(false);
}
public final DisplayP einde_bestand=new DisplayP();
public final Variable jbcd_string=new Variable();
public final Variable rapportstatus=new Variable();
public final DisplayP voorschriftid_OF_voorschriftrecord=new DisplayP();
public final Variable medicamenten_OF_voorschriftrecord=new Variable();
public final DisplayP dokterid_OF_voorschriftrecord=new DisplayP();
public final DisplayP patientid_OF_voorschriftrecord=new DisplayP();
public final Variable voorschriftrecord=new Variable();
public final DisplayP sqlcode=new DisplayP();
public final Variable sqlstate=new Variable();
public final Variable jdbcstring=new Variable();


public void doDeclarations()
{
try
{
declarations();
}
catch(Exception _initializerException)
{
CobolException.runtimeError(_context,"INTERNAL ERROR: Cannot initialize variable storage for doktervoorschrift section 'Wrk'",_initializerException);
}
}

public void declarations()
{
final Memory _memory=this._memory;
einde_bestand.declare(_memory,0,1,"einde_bestand",1,"0",null,null,jbcd_string,0x04000000);
jbcd_string.declare(_memory,1,1000,"jbcd_string",null,null,null,null,rapportstatus,0x00000000);
rapportstatus.declare(_memory,1001,2,"rapportstatus",null,null,null,null,voorschriftrecord,0x00000000);
voorschriftid_OF_voorschriftrecord.declare(_memory,1003,3,"voorschriftid",3,null,voorschriftrecord,null,medicamenten_OF_voorschriftrecord,0x04000000);
medicamenten_OF_voorschriftrecord.declare(_memory,1006,60,"medicamenten",null,null,voorschriftrecord,null,dokterid_OF_voorschriftrecord,0x00000000);
dokterid_OF_voorschriftrecord.declare(_memory,1066,3,"dokterid",3,null,voorschriftrecord,null,patientid_OF_voorschriftrecord,0x04000000);
patientid_OF_voorschriftrecord.declare(_memory,1069,3,"patientid",3,null,voorschriftrecord,null,null,0x04000000);
voorschriftrecord.declare(_memory,1003,69,"voorschriftrecord",null,null,null,voorschriftid_OF_voorschriftrecord,sqlcode,0x00000000);
sqlcode.declare(_memory,1072,3,"sqlcode",3,null,null,null,sqlstate,0x04400000);
sqlstate.declare(_memory,1075,5,"sqlstate",null,null,null,null,jdbcstring,0x00000000);
jdbcstring.declare(_memory,1080,255,"jdbcstring",null,null,null,null,null,0x00000000);

} // end declarations

private final Memory _memory=new Memory(1335,"doktervoorschrift.Wrk");

} // end Wrk
public transient Wrk wrk=null; // instance accessor for data section


public void _declareFiles()
{
fil.rapportbestand.setContext(_context);
fil.rapportbestand.declare(false,"DoktersVoorschriften.out",0,null,(char)0,wrk.rapportstatus,	// optional, assign to, reserve, padding, file-status
0,0,false,	// block from, to, records
200,200,null,	// record from, to, depending on
false,	// label records omitted
null,0,	// linage
null,0,	// footing
null,0,	// top
null,0,	// bottom
null)	// code-set [,newModes]
;

fil.logfile.setContext(_context);
fil.logfile.declare(false,"logfile.txt",0,null,(char)0,null,	// optional, assign to, reserve, padding, file-status
0,0,false,	// block from, to, records
100,100,null,	// record from, to, depending on
false,	// label records omitted
null,0,	// linage
null,0,	// footing
null,0,	// top
null,0,	// bottom
null)	// code-set [,newModes]
.setLineSequential();
}

public java.lang.Object call(Context _passContext)
{
setup(_passContext);
return callGiving();
}

public java.lang.Object call(Context _passContext,parameterList _param)
{
setup(_passContext);
return callGiving(_param);
}

public java.lang.Object callGiving()
{
call();
return _context.getReturnCode();
}

public void call()
{
setup(_context);
_context.setProgramCalled();
run(-1,0);
} // end call

public java.lang.Object call(boolean[] _byRef,java.lang.Object[] _param)
{
return callGiving(new parameterList(_byRef,_param));
}

public java.lang.Object callGiving(parameterList _param)
{
call(_param);
return _context.getReturnCode();
}

public void call(parameterList _param)
{
if(_context==null) setup(_context);
_context.setProgramCalled();
run(-1,0); // no parameters expected
} // end call(parameterList)

static public final int _pgm_Label=1;

public final int pgm()
{
final Wrk wrk=this.wrk;
ThreadQueue.suspendCurrentOnLock();
boolean _sizeError=false;
_sizeError=!fil.logfile.open(FileConstants.WRITE);
if(_sizeError && _context.openFailure(false,fil.logfile))
{
throw new com.legacyj.exception.StopRun("OPEN FAILURE");
}
int _performResult=0;
if((_performResult=lees_connectiestring())>0) perform(_performResult,_lees_connectiestring_Label);
while(!(wrk.eof_OF_einde_bestand()))
{
if((_performResult=vul_gegevens_voorschrift_in())>0) perform(_performResult,_vul_gegevens_voorschrift_in_Label);
} // end perform with test before
return 0; // fall through
} // End Paragraph

static public final int _lees_connectiestring_Label=2;

public final int lees_connectiestring()
{
final Wrk wrk=this.wrk;
ThreadQueue.suspendCurrentOnLock();
int _performResult=0;
if((_performResult=write_log())>0) perform(_performResult,_write_log_Label);
boolean _sizeError=false;
Index _defaultPointerIndex=new Index(1);
_sizeError|=wrk.jbcd_string.string("jdbc:mysql://localhost/DokterApotheekDb",_defaultPointerIndex);
_sizeError=!_context.defaultio().display(_context,_SCONSTANT_0);
fil.loglijn_OF_logrec_OF_logfile.move(_BCHARCONSTANT_0);
if((_performResult=write_log())>0) perform(_performResult,_write_log_Label);
return 0; // fall through
} // End Paragraph

static public final int _vul_gegevens_voorschrift_in_Label=3;

public final int vul_gegevens_voorschrift_in()
{
final Wrk wrk=this.wrk;
ThreadQueue.suspendCurrentOnLock();
fil.loglijn_OF_logrec_OF_logfile.move(_BCHARCONSTANT_1);
int _performResult=0;
if((_performResult=write_log())>0) perform(_performResult,_write_log_Label);
boolean _sizeError=false;
_sizeError=!_context.defaultio().display(_context,_SCONSTANT_1);
_sizeError=false;
_sizeError=!_context.defaultio().accept(_context,wrk.voorschriftid_OF_voorschriftrecord);
_sizeError=!_context.defaultio().display(_context,_SCONSTANT_2);
_sizeError=false;
_sizeError=!_context.defaultio().accept(_context,wrk.medicamenten_OF_voorschriftrecord);
_sizeError=!_context.defaultio().display(_context,_SCONSTANT_3);
_sizeError=false;
_sizeError=!_context.defaultio().accept(_context,wrk.dokterid_OF_voorschriftrecord);
_sizeError=!_context.defaultio().display(_context,_SCONSTANT_4);
_sizeError=false;
_sizeError=!_context.defaultio().accept(_context,wrk.patientid_OF_voorschriftrecord);
fil.loglijn_OF_logrec_OF_logfile.move(_BCHARCONSTANT_2);
if((_performResult=write_log())>0) perform(_performResult,_write_log_Label);
_sizeError=!_context.defaultio().display(_context,_SCONSTANT_5+wrk.voorschriftid_OF_voorschriftrecord.toText());
_sizeError=!_context.defaultio().display(_context,_SCONSTANT_6);
_sizeError=false;
_sizeError=!_context.defaultio().accept(_context,wrk.einde_bestand);
return 0; // fall through
} // End Paragraph

static public final int __2000_genereerrapport_Label=5;

public final int _2000_genereerrapport()
{
final Wrk wrk=this.wrk;
ThreadQueue.suspendCurrentOnLock();
boolean _sizeError=false;
_sizeError=!_context.defaultio().display(_context,_SCONSTANT_7);
_sizeError=!fil.rapportbestand.open(FileConstants.WRITE);
if(_sizeError && _context.openFailure(false,fil.rapportbestand))
{
throw new com.legacyj.exception.StopRun("OPEN FAILURE");
}
int _performResult=0;
if((_performResult=do_connect())>0) perform(_performResult,_do_connect_Label);
SqlCursor _sqlCursor=null;
try
{
_sqlCursor=_context.getSqlContext().getCursors().allocate("default");
_sqlCursor.declare(_getConnection(null).prepareStatement("SELECT id,medicamenten, dokterId, patientId FROM voorschrift WHERE id = ?")); // ps1
_sqlCursor.setObject(wrk.voorschriftid_OF_voorschriftrecord,null);
if(!_sqlCursor.open()) throw new java.sql.SQLException("PERCobol SQL: 24000: Cannot open an already opened cursor","24000");
java.sql.ResultSet _resultSet=_sqlCursor.getResultSet();
if(_resultSet.next())
{
int _rightTruncation=0;
_rightTruncation|=wrk.voorschriftid_OF_voorschriftrecord.setSqlTrimObject((_resultSet.getObject(1)),null,true,false);
_rightTruncation|=wrk.medicamenten_OF_voorschriftrecord.setSqlTrimObject((_resultSet.getObject(2)),null,true,false);
_rightTruncation|=wrk.dokterid_OF_voorschriftrecord.setSqlTrimObject((_resultSet.getObject(3)),null,true,false);
_rightTruncation|=wrk.patientid_OF_voorschriftrecord.setSqlTrimObject((_resultSet.getObject(4)),null,true,false);

if(_resultSet.next()) throw new java.sql.SQLException("PERCobol SQL: 21000: Unexpected next row in ResultSet","21000"); // verify no next row
if(_rightTruncation>=SqlContext.CAN_STORE_ERROR) throw new java.sql.SQLException("PERCobol SQL: 22001.C6: Data Truncation","22001");
if(_rightTruncation>=SqlContext.CAN_STORE_WARNING) throw new java.sql.SQLException("PERCobol SQL: 01004.C6: Data Truncation","01004");
}
else
{
throw new java.sql.SQLException("PERCobol SQL: 02000.C5: No next row in resultset","02000");
}
_sqlClear();
_sqlWarningHandler(_sqlCursor.getSQLWarning(),-1,-1,-1);
}
catch(java.sql.SQLException _sqlException)
{
_sqlExceptionHandler(_sqlException,-1,-1,-1);
}
catch(Exception _otherException)
{
_sqlExceptionHandler(_otherException,-1,-1,-1);
}
finally
{
try
{
if(!_sqlCursor.close()) throw new java.sql.SQLException("PERCobol SQL: 24000: Cannot close an already closed cursor","24000");
}
catch(Exception _statementCloseException)
{
;
}
}
_sizeError=!_context.defaultio().display(_context,_SCONSTANT_8+wrk.sqlcode.toText());
_sizeError=!_context.defaultio().display(_context,_SCONSTANT_9);
_sizeError=!_context.defaultio().display(_context,wrk.voorschriftid_OF_voorschriftrecord.toText());
_sizeError=!_context.defaultio().display(_context,_SCONSTANT_10);
_sizeError=!_context.defaultio().display(_context,wrk.medicamenten_OF_voorschriftrecord.toText());
_sizeError=!_context.defaultio().display(_context,_SCONSTANT_11);
_sizeError=!_context.defaultio().display(_context,wrk.dokterid_OF_voorschriftrecord.toText());
_sizeError=!_context.defaultio().display(_context,_SCONSTANT_12);
_sizeError=!_context.defaultio().display(_context,wrk.patientid_OF_voorschriftrecord.toText());
_sizeError=!_context.defaultio().display(_context,_SCONSTANT_13);
_sizeError=!_context.defaultio().display(_context,Intrinsic.current_date().toText());
if((_performResult=do_disconnect())>0) perform(_performResult,_do_disconnect_Label);
_sizeError=false;
_sizeError=!_context.defaultio().accept(_context,wrk.einde_bestand);
_sizeError=false;
Index _defaultPointerIndex=new Index(1);
_sizeError|=fil.rapportlijn_OF_rapportrecord_OF_rapportbestand.string("VoorschriftId ",_defaultPointerIndex);
_sizeError|=fil.rapportlijn_OF_rapportrecord_OF_rapportbestand.string(wrk.voorschriftid_OF_voorschriftrecord,Variable.SPACES_STRING,_defaultPointerIndex);
_sizeError|=fil.rapportlijn_OF_rapportrecord_OF_rapportbestand.string(" Voorgeshreven Medicamenten ",_defaultPointerIndex);
_sizeError|=fil.rapportlijn_OF_rapportrecord_OF_rapportbestand.string(wrk.medicamenten_OF_voorschriftrecord,Variable.SPACES_STRING,_defaultPointerIndex);
_sizeError|=fil.rapportlijn_OF_rapportrecord_OF_rapportbestand.string(" dokterId ",_defaultPointerIndex);
_sizeError|=fil.rapportlijn_OF_rapportrecord_OF_rapportbestand.string(wrk.dokterid_OF_voorschriftrecord,Variable.SPACES_STRING,_defaultPointerIndex);
_sizeError|=fil.rapportlijn_OF_rapportrecord_OF_rapportbestand.string(" patientId ",_defaultPointerIndex);
_sizeError|=fil.rapportlijn_OF_rapportrecord_OF_rapportbestand.string(wrk.patientid_OF_voorschriftrecord,Variable.SPACES_STRING,_defaultPointerIndex);
_sizeError|=fil.rapportlijn_OF_rapportrecord_OF_rapportbestand.string(";",_defaultPointerIndex);
_sizeError=(fil.rapportbestand.write(fil.rapportrecord_OF_rapportbestand,0,null));
return 0; // fall through
} // End Paragraph

static public final int _write_log_Label=4;

public final int write_log()
{
final Wrk wrk=this.wrk;
ThreadQueue.suspendCurrentOnLock();
boolean _sizeError=false;
_sizeError=(fil.logfile.write(fil.logrec_OF_logfile,0,null));
return 0; // fall through
} // End Paragraph

static public final int _do_connect_Label=6;

public final int do_connect()
{
final Wrk wrk=this.wrk;
ThreadQueue.suspendCurrentOnLock();
try
{
java.sql.Connection _sqlConnection=null;
_context.getSqlContext().setLogMode(0);
_sqlConnection=_context.getSqlContext().connect(null,wrk.jbcd_string.getSqlObject(96),"com.mysql.jdbc.Driver",null,null,null);
_sqlClear();
_sqlWarningHandler(_sqlConnection.getWarnings(),-1,-1,-1);
}
catch(java.sql.SQLException _sqlException)
{
_sqlExceptionHandler(_sqlException,-1,-1,-1);
}
catch(Exception _otherException)
{
_sqlExceptionHandler(_otherException,-1,-1,-1);
}
return 0; // fall through
} // End Paragraph

static public final int _do_disconnect_Label=7;

public final int do_disconnect()
{
final Wrk wrk=this.wrk;
ThreadQueue.suspendCurrentOnLock();
try
{
_context.getSqlContext().disconnect();
_sqlClear();
}
catch(java.sql.SQLException _sqlException)
{
_sqlExceptionHandler(_sqlException,-1,-1,-1);
}
catch(Exception _otherException)
{
_sqlExceptionHandler(_otherException,-1,-1,-1);
}
return 0; // fall through
} // End Paragraph

public int getPercobolMajorVersion() { return 4; }
public int getPercobolMinorVersion() { return 1; }
public int getPercobolServiceVersion() { return 60; }


public void run() // Runnable
{
try
{
run(-1,-1);
ThreadQueue.die();
}
catch(UnwindException _unwindException)
{
return; // completely unwound
}
catch(Throwable _anyException)
{
CobolException.runtimeError(_context,_anyException);
}
}

public void run(int _thread,int _entry) // CobolInterface
{
if(_context==null)
{
if(_entry<0) _entry=0;
setup(null);
}
else
{
if(_entry<0) _entry=_context.getEntryParagraph();
_context.setEntryParagraph(0);
}
try
{
perform(_entry,-1);
return;
}
catch(ExitProgramException _exitProgramException)
{
return; // goback
}
}

public String redirectCall()
{
return null;
}

static public void main(String _args[]) // application entry
{
doktervoorschrift _programInstance=null;
try
{
_programInstance=new doktervoorschrift();
Context.initializeApplication(_programInstance,_args);
_programInstance.run(-1,-1);
ThreadQueue.die();
_programInstance._context.exit();
}
catch(Throwable _throwableException)
{
CobolException.dumpError(_programInstance,_throwableException,false);
}
Context.applicationExit();
}

public transient Context _context;

public Context setup(Context _passContext)
{
_context=_passContext;
if(_context==null) // create fresh context
{
_context=new Context(_passContext,_programId,this);
}
else
    _context.setupContext(_passContext,_programId,this);
wrk=(Wrk)_context.getWrk();
fil=(Fil)_context.getFil();
boolean doDeclareWrk=false;
boolean doDeclareFil=false;
if(wrk==null)
{
doDeclareWrk=true;
_context.setWrk(wrk=new Wrk());
}
if(fil==null)
{
doDeclareFil=true;
_context.setFil(fil=new Fil());
}
if(doDeclareWrk) wrk.doDeclarations();
if(doDeclareFil) fil.doDeclarations();
if(doDeclareFil) _declareFiles();
return _context;
}

public void cancel() // close open files, chance for custom action
{
fil.rapportbestand.init();
fil.logfile.init();
} // end cancel

public void perform(int _procedure) // CobolInterface
{
perform(_procedure,_procedure); // only procedure
}

public void perform(int _begin,int _end) // CobolInterface
{
try
{
for(;;) // forever until stopped
{
switch(_begin)
{

case 0: // Initial Paragraph
case 1: pgm();
if(_end==_pgm_Label) return;

case 2: lees_connectiestring();
if(_end==_lees_connectiestring_Label) return;

case 3: vul_gegevens_voorschrift_in();
if(_end==_vul_gegevens_voorschrift_in_Label) return;

case 5: _2000_genereerrapport();
if(_end==__2000_genereerrapport_Label) return;

case 4: write_log();
if(_end==_write_log_Label) return;

case 6: do_connect();
if(_end==_do_connect_Label) return;

case 7: do_disconnect();
if(_end==_do_disconnect_Label) return;

default: throw new ExitProgramException();
} // end switch
} // end forever
}
catch(UnwindException _unwindException)
{
perform(_unwindException.unwind(_context,this),_end);
return;
}
catch(ExitProgramException _exitProgramException)
{
throw _exitProgramException;
}
catch(Throwable _runtimeException)
{
int _resumeAt=_exceptionHandler(_runtimeException,false);
if(_resumeAt>0) perform(_resumeAt,_resumeAt);
else throw new ExitProgramException("RESUME AT NEXT STATEMENT from USE EXCEPTION");
}
} // end perform(int,int)

public int _exceptionHandler(Throwable _exception,boolean _nextStatementAvailable)
{
if(_exception instanceof RuntimeException) throw (RuntimeException)_exception;
if(_exception instanceof Error) throw (Error)_exception;
throw new com.legacyj.exception.EcObject(_exception);
}
public void _sqlClear()
{
wrk.sqlcode.move(0);
wrk.sqlstate.move("00000"); // successful execution
}

public java.sql.Connection _getConnection(String _name) throws java.sql.SQLException
{
return _context.getSqlContext().getConnection(_name);
}

public void _setConnection(Object _reference) throws java.sql.SQLException
{
_context.getSqlContext().setConnection(_reference);
}

public int _sqlVendorCode(int _vendorCode,int _desiredCode)
{
switch(_desiredCode)
{
case  -1: if(_vendorCode>0) return -_vendorCode;
          if(_vendorCode==0) return -1;
          return _vendorCode;
case   0: return 0;
case 100: return 100;
}
return _vendorCode;
}

public int _sqlWarningHandler(java.sql.SQLWarning _sqlException,int _notFoundLabel,int _warningLabel,int _errorLabel)
{
if(_sqlException==null) return -1;
int _errorCode=_sqlException.getErrorCode();
String _sqlResult=SqlContext.obtainSqlState(_sqlException);
wrk.sqlstate.move(_sqlResult);
if(_sqlResult.startsWith("01"))
{
if(_warningLabel!=-1) return _warningLabel; // WHENEVER SQLWARNING HANDLER
}
else if(_sqlResult.startsWith("02"))
{
if(_notFoundLabel!=-1) return _notFoundLabel; // WHENEVER NOT FOUND HANDLER
}
return -1;
} // end _sqlWarningHandler

public int _sqlExceptionHandler(Throwable _otherException,int _notFoundLabel,int _warningLabel,int _errorLabel)
{
String _sqlResult=null;
int _errorCode=-1;
wrk.sqlstate.move("01000");
_sqlResult="01";
if(_sqlResult.startsWith("01"))
{
wrk.sqlcode.move(_sqlVendorCode(_errorCode,100));
if(_warningLabel!=-1) return _warningLabel; // WHENEVER SQLWARNING HANDLER
}
return -1;
}

public int _sqlExceptionHandler(java.sql.SQLException _sqlException,int _notFoundLabel,int _warningLabel,int _errorLabel)
{
String _sqlResult=null;
int _errorCode=0;
if(_sqlException!=null)
{
_errorCode=_sqlException.getErrorCode();
_sqlResult=SqlContext.obtainSqlState(_sqlException);
wrk.sqlstate.move(_sqlResult);
}
else
{
_errorCode=-1;
wrk.sqlstate.move("01000");
_sqlResult="01";
}
if(_sqlResult.startsWith("01"))
{
wrk.sqlcode.move(_sqlVendorCode(_errorCode,100));
if(_warningLabel!=-1) return _warningLabel; // WHENEVER SQLWARNING HANDLER
}
else if(_sqlResult.startsWith("02"))
{
wrk.sqlcode.move(_sqlVendorCode(_errorCode,100));
if(_notFoundLabel!=-1) return _notFoundLabel; // WHENEVER NOT FOUND HANDLER
}
else if(!_sqlResult.startsWith("00"))
{
wrk.sqlcode.move(_sqlVendorCode(_errorCode,-1));
if(_errorLabel!=-1) return _errorLabel; // WHENEVER ERROR HANDLER
} // end if
return -1;
} // end _sqlExceptionHandler


static public final String _localNameConverter[][]=null;
static public final String _SCONSTANT_0=Variable.codePageToString("jbcd-string ingelezen");
static public final String _SCONSTANT_1=Variable.codePageToString("id graag:");
static public final String _SCONSTANT_2=Variable.codePageToString("voor te schrijven medicamenten:");
static public final String _SCONSTANT_3=Variable.codePageToString("dokter id:");
static public final String _SCONSTANT_4=Variable.codePageToString("patient id:");
static public final String _SCONSTANT_5=Variable.codePageToString("Voorschrift id ");
static public final String _SCONSTANT_6=Variable.codePageToString("Nog \351\351n ingeven (typ 1) of niet (typ 0)?");
static public final String _SCONSTANT_7=Variable.codePageToString("rapport wordt uitgevoerd");
static public final String _SCONSTANT_8=Variable.codePageToString("SQLCODE: ");
static public final String _SCONSTANT_9=Variable.codePageToString("ID ");
static public final String _SCONSTANT_10=Variable.codePageToString(" Voorgeshreven Medicamenten ");
static public final String _SCONSTANT_11=Variable.codePageToString(" dokterId ");
static public final String _SCONSTANT_12=Variable.codePageToString(" patientId ");
static public final String _SCONSTANT_13=Variable.codePageToString(" Function Current-date");
static public final byte[] _BCHARCONSTANT_0=Variable.byteArrayOf("connectiestring ingelezen");
static public final byte[] _BCHARCONSTANT_1=Variable.byteArrayOf("geen voorschrift");
static public final byte[] _BCHARCONSTANT_2=Variable.byteArrayOf("voorschrift correct weggeschreven");
static public final Numeric _NCONSTANT_0=(Numeric)(new Numeric("0"));
static public final Numeric _NCONSTANT_1=(Numeric)(new Numeric("1"));

} // end program doktervoorschrift