// LegacyJ – PERCobol Java Source Code
//
// This is a cross-compiler generated Java source code file – whose original source
// was a COBOL program of the same name.
//
// If you want to switch from COBOL maintenance to Java maintenance, you must
// 1. edit this file as you see fit,
// 2. move the resultant file to the “java_source” folder, and
// 3. delete the originally named COBOL source file found there.
//
// This file requires percobol.jar, which is part of the LegacyJ runtime library.

import com.synkronix.cobol.*;

/**
 * PROGRAM-ID planningsdata<br>
 * Compiled on 2017-02-06 at 14:39:46<br>
 *
 * Generated by PERCobol(TM) Cobol compiler bringing IT together<br>
 * PERCobol(TM) Copyright 1996-2009 <a href="http://www.LegacyJ.com">LegacyJ</a><br>
 * @version V4.1.60e
 */
@SuppressWarnings("all")
public class planningsdata
implements CobolProgram, com.legacyj.api.Callable, com.legacyj.api.Cancelable
{
static public final String _programId="planningsdata";

public String toString()
{
return "PROGRAM PLANNINGSDATA ("+super.toString()+"):"+String.valueOf(_context);
}


static // initializer
{
Variable.completeInitialization();
}


@SuppressWarnings("all")
public class Fil implements Section
{
public String toString()
{
return "FILE SECTION";
}

public final DisplayP eventid_OF_planningrecord_OF_planningfile=new DisplayP();
public final Variable __filler0_OF_planningrecord_OF_planningfile=new Variable();
public final Variable eventname_OF_planningrecord_OF_planningfile=new Variable();
public final Variable __filler1_OF_planningrecord_OF_planningfile=new Variable();
public final Variable datum_OF_planningrecord_OF_planningfile=new Variable();
public final Variable __filler2_OF_planningrecord_OF_planningfile=new Variable();
public final Variable eventbeschrijving_OF_planningrecord_OF_planningfile=new Variable();
public final Variable __filler3_OF_planningrecord_OF_planningfile=new Variable();
public final Variable planningrecord_OF_planningfile=new Variable();
public final idxFile planningfile=(idxFile)RecordFile.getIdxFile(_context,"LINE:planning.txt");


public void doDeclarations()
{
try
{
declarations();
}
catch(Exception _initializerException)
{
CobolException.runtimeError(_context,"INTERNAL ERROR: Cannot initialize variable storage for planningsdata section 'Fil'",_initializerException);
}
}

public void declarations()
{
final Memory _memory=this._memory;
eventid_OF_planningrecord_OF_planningfile.declare(_memory,0,3,"eventid",3,null,planningrecord_OF_planningfile,null,__filler0_OF_planningrecord_OF_planningfile,0x04000000);
__filler0_OF_planningrecord_OF_planningfile.declare(_memory,3,1,null,null," ",planningrecord_OF_planningfile,null,eventname_OF_planningrecord_OF_planningfile,0x00000080);
eventname_OF_planningrecord_OF_planningfile.declare(_memory,4,50,"eventname",null,null,planningrecord_OF_planningfile,null,__filler1_OF_planningrecord_OF_planningfile,0x00000000);
__filler1_OF_planningrecord_OF_planningfile.declare(_memory,54,1,null,null," ",planningrecord_OF_planningfile,null,datum_OF_planningrecord_OF_planningfile,0x00000080);
datum_OF_planningrecord_OF_planningfile.declare(_memory,55,10,"datum","99/99/9999",null,planningrecord_OF_planningfile,null,__filler2_OF_planningrecord_OF_planningfile,0x0c000000);
__filler2_OF_planningrecord_OF_planningfile.declare(_memory,65,1,null,null,"  ",planningrecord_OF_planningfile,null,eventbeschrijving_OF_planningrecord_OF_planningfile,0x00000080);
eventbeschrijving_OF_planningrecord_OF_planningfile.declare(_memory,66,120,"eventbeschrijving",null,null,planningrecord_OF_planningfile,null,__filler3_OF_planningrecord_OF_planningfile,0x00000000);
__filler3_OF_planningrecord_OF_planningfile.declare(_memory,186,1,null,null,"  ",planningrecord_OF_planningfile,null,null,0x00000080);
planningrecord_OF_planningfile.declare(_memory,0,187,"planningrecord",null,null,null,eventid_OF_planningrecord_OF_planningfile,null,0x00000000);

} // end declarations

private final Memory _memory=new Memory(187,"planningsdata.Fil");

} // end Fil
public transient Fil fil=null; // instance accessor for data section


@SuppressWarnings("all")
public class Wrk implements Section
{
public String toString()
{
return "WORKING-STORAGE SECTION";
}


public boolean recordfound_OF_planningstatus(boolean _setTrue) // Condition RECORDFOUND OF PLANNINGSTATUS
{
    return recordfound_OF_planningstatus(_setTrue ? 1 : 0);
}

public boolean recordfound_OF_planningstatus(int _setTrue) // Condition RECORDFOUND OF PLANNINGSTATUS
{
    if(_setTrue==1)
    {
        planningstatus.move(new Variable("00"));
        return true;
    }
    if(planningstatus.compare(new Variable("00"))==0) return true;

    return false;
}

public boolean recordfound_OF_planningstatus()
{
    return recordfound_OF_planningstatus(false);
}
public final Variable planningstatus=new Variable();

public boolean eventidkey_OF_requiredkey(boolean _setTrue) // Condition EVENTIDKEY OF REQUIREDKEY
{
    return eventidkey_OF_requiredkey(_setTrue ? 1 : 0);
}

public boolean eventidkey_OF_requiredkey(int _setTrue) // Condition EVENTIDKEY OF REQUIREDKEY
{
    if(_setTrue==1)
    {
        requiredkey.move(_NCONSTANT_0);
        return true;
    }
    if(requiredkey.compare(_NCONSTANT_0)==0) return true;

    return false;
}

public boolean eventidkey_OF_requiredkey()
{
    return eventidkey_OF_requiredkey(false);
}

public boolean eventnamekey_OF_requiredkey(boolean _setTrue) // Condition EVENTNAMEKEY OF REQUIREDKEY
{
    return eventnamekey_OF_requiredkey(_setTrue ? 1 : 0);
}

public boolean eventnamekey_OF_requiredkey(int _setTrue) // Condition EVENTNAMEKEY OF REQUIREDKEY
{
    if(_setTrue==1)
    {
        requiredkey.move(_NCONSTANT_1);
        return true;
    }
    if(requiredkey.compare(_NCONSTANT_1)==0) return true;

    return false;
}

public boolean eventnamekey_OF_requiredkey()
{
    return eventnamekey_OF_requiredkey(false);
}
public final DisplayP requiredkey=new DisplayP();
public final DisplayP prneventid_OF_prnplanningrecord=new DisplayP();
public final Variable prneventname_OF_prnplanningrecord=new Variable();
public final Variable prndatum_OF_prnplanningrecord=new Variable();
public final Variable prnbeschrijving_OF_prnplanningrecord=new Variable();
public final Variable prnplanningrecord=new Variable();


public void doDeclarations()
{
try
{
declarations();
}
catch(Exception _initializerException)
{
CobolException.runtimeError(_context,"INTERNAL ERROR: Cannot initialize variable storage for planningsdata section 'Wrk'",_initializerException);
}
}

public void declarations()
{
final Memory _memory=this._memory;
planningstatus.declare(_memory,0,2,"planningstatus",null,null,null,null,requiredkey,0x00000000);
requiredkey.declare(_memory,2,1,"requiredkey",1,null,null,null,prnplanningrecord,0x04000000);
prneventid_OF_prnplanningrecord.declare(_memory,3,5,"prneventid",5,null,prnplanningrecord,null,prneventname_OF_prnplanningrecord,0x04000000);
prneventname_OF_prnplanningrecord.declare(_memory,8,44,"prneventname","BBBBXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",null,prnplanningrecord,null,prndatum_OF_prnplanningrecord,0x08000000);
prndatum_OF_prnplanningrecord.declare(_memory,52,6,"prndatum","BBBB99",null,prnplanningrecord,null,prnbeschrijving_OF_prnplanningrecord,0x0c000000);
prnbeschrijving_OF_prnplanningrecord.declare(_memory,58,222,"prnbeschrijving",null,null,prnplanningrecord,null,null,0x00000000);
prnplanningrecord.declare(_memory,3,277,"prnplanningrecord",null,null,null,prneventid_OF_prnplanningrecord,null,0x00000000);

} // end declarations

private final Memory _memory=new Memory(280,"planningsdata.Wrk");

} // end Wrk
public transient Wrk wrk=null; // instance accessor for data section


public void _declareFiles()
{
fil.planningfile.setContext(_context);
fil.planningfile.declare(false,"LINE:planning.txt",0,wrk.planningstatus,	// optional, assign to, reserve, file-status
FileConstants.DYN, fil.eventid_OF_planningrecord_OF_planningfile,	// Access Dynamic, Record Key
0,0,false,	// block from, to, records
187,187,null)	// record from, to, depending on
.alternateKey(fil.eventname_OF_planningrecord_OF_planningfile,FileConstants.DUPLICATES)
.endDeclare();
}

public java.lang.Object call(Context _passContext)
{
setup(_passContext);
return callGiving();
}

public java.lang.Object call(Context _passContext,parameterList _param)
{
setup(_passContext);
return callGiving(_param);
}

public java.lang.Object callGiving()
{
call();
return _context.getReturnCode();
}

public void call()
{
setup(_context);
_context.setProgramCalled();
run(-1,0);
} // end call

public java.lang.Object call(boolean[] _byRef,java.lang.Object[] _param)
{
return callGiving(new parameterList(_byRef,_param));
}

public java.lang.Object callGiving(parameterList _param)
{
call(_param);
return _context.getReturnCode();
}

public void call(parameterList _param)
{
if(_context==null) setup(_context);
_context.setProgramCalled();
run(-1,0); // no parameters expected
} // end call(parameterList)

static public final int _begin_Label=1;

public final int begin()
{
final Wrk wrk=this.wrk;
ThreadQueue.suspendCurrentOnLock();
boolean _sizeError=false;
_sizeError=!fil.planningfile.open(FileConstants.WRITE);
if(_sizeError && _context.openFailure(false,fil.planningfile))
{
throw new com.legacyj.exception.StopRun("OPEN FAILURE");
}
_sizeError=!_context.defaultio().displayNoAdvancing(_context,_SCONSTANT_0);
_sizeError=false;
_sizeError=!_context.defaultio().accept(_context,wrk.requiredkey);
return 0; // fall through
} // End Paragraph

static public final int _fillineventdata_Label=2;

public final int fillineventdata()
{
final Wrk wrk=this.wrk;
ThreadQueue.suspendCurrentOnLock();
if(wrk.eventidkey_OF_requiredkey())
{
boolean _sizeError=false;
_sizeError=!_context.defaultio().displayNoAdvancing(_context,_SCONSTANT_1);
_sizeError=false;
_sizeError=!_context.defaultio().accept(_context,fil.eventid_OF_planningrecord_OF_planningfile);
_sizeError=!_context.defaultio().displayNoAdvancing(_context,_SCONSTANT_2);
_sizeError=false;
_sizeError=!_context.defaultio().accept(_context,fil.eventname_OF_planningrecord_OF_planningfile);
_sizeError=!_context.defaultio().display(_context,_SCONSTANT_3);
_sizeError=false;
_sizeError=!_context.defaultio().accept(_context,fil.datum_OF_planningrecord_OF_planningfile);
_sizeError=!_context.defaultio().display(_context,_SCONSTANT_4);
_sizeError=false;
_sizeError=!_context.defaultio().accept(_context,fil.eventbeschrijving_OF_planningrecord_OF_planningfile);
_sizeError=(fil.planningfile.write(null,null,null,fil.planningrecord_OF_planningfile,0,null));
if(_sizeError)
{
_sizeError=!_context.defaultio().display(_context,_SCONSTANT_5+wrk.planningstatus.toText());
}
else
{
_sizeError=!_context.defaultio().display(_context,_SCONSTANT_6+fil.eventid_OF_planningrecord_OF_planningfile.toText());
}
}
if(wrk.eventnamekey_OF_requiredkey())
{
boolean _sizeError=false;
_sizeError=!_context.defaultio().displayNoAdvancing(_context,_SCONSTANT_2);
_sizeError=false;
_sizeError=!_context.defaultio().accept(_context,fil.eventname_OF_planningrecord_OF_planningfile);
fil.eventid_OF_planningrecord_OF_planningfile.add(1);

_sizeError=!_context.defaultio().display(_context,_SCONSTANT_3);
_sizeError=false;
_sizeError=!_context.defaultio().accept(_context,fil.datum_OF_planningrecord_OF_planningfile);
_sizeError=!_context.defaultio().display(_context,_SCONSTANT_4);
_sizeError=false;
_sizeError=!_context.defaultio().accept(_context,fil.eventbeschrijving_OF_planningrecord_OF_planningfile);
_sizeError=(fil.planningfile.write(null,null,null,fil.planningrecord_OF_planningfile,0,null));
if(_sizeError)
{
_sizeError=!_context.defaultio().display(_context,_SCONSTANT_7+wrk.planningstatus.toText());
}
else
{
_sizeError=!_context.defaultio().display(_context,_SCONSTANT_6+fil.eventname_OF_planningrecord_OF_planningfile.toText());
}
}
boolean _sizeError=false;
_sizeError=!_context.defaultio().display(_context,_SCONSTANT_8+fil.eventname_OF_planningrecord_OF_planningfile.toText());
_sizeError=false;
_sizeError=!_context.defaultio().accept(_context,fil.eventname_OF_planningrecord_OF_planningfile);
if(wrk.recordfound_OF_planningstatus())
{
wrk.prneventid_OF_prnplanningrecord.move(fil.eventid_OF_planningrecord_OF_planningfile);
wrk.prneventname_OF_prnplanningrecord.move(fil.eventname_OF_planningrecord_OF_planningfile);
wrk.prndatum_OF_prnplanningrecord.move(fil.datum_OF_planningrecord_OF_planningfile);
wrk.prnbeschrijving_OF_prnplanningrecord.move(fil.eventbeschrijving_OF_planningrecord_OF_planningfile);
_sizeError=!_context.defaultio().display(_context,wrk.prnplanningrecord.toText());
}
int _performResult=0;
if((_performResult=fillineventdata())>0) perform(_performResult,_fillineventdata_Label);
while(!((fil.planningrecord_OF_planningfile.compare(Variable.SPACES)==0)))
{
if((_performResult=fillineventdata())>0) perform(_performResult,_fillineventdata_Label);
} // end perform with test before
fil.planningfile.close();
_context.exit(_context.getReturnInt()); // Stop Run
return 0; // fall through
} // End Paragraph

public int getPercobolMajorVersion() { return 4; }
public int getPercobolMinorVersion() { return 1; }
public int getPercobolServiceVersion() { return 60; }


public void run() // Runnable
{
try
{
run(-1,-1);
ThreadQueue.die();
}
catch(UnwindException _unwindException)
{
return; // completely unwound
}
catch(Throwable _anyException)
{
CobolException.runtimeError(_context,_anyException);
}
}

public void run(int _thread,int _entry) // CobolInterface
{
if(_context==null)
{
if(_entry<0) _entry=0;
setup(null);
}
else
{
if(_entry<0) _entry=_context.getEntryParagraph();
_context.setEntryParagraph(0);
}
try
{
perform(_entry,-1);
return;
}
catch(ExitProgramException _exitProgramException)
{
return; // goback
}
}

public String redirectCall()
{
return null;
}

static public void main(String _args[]) // application entry
{
planningsdata _programInstance=null;
try
{
_programInstance=new planningsdata();
Context.initializeApplication(_programInstance,_args);
_programInstance.run(-1,-1);
ThreadQueue.die();
_programInstance._context.exit();
}
catch(Throwable _throwableException)
{
CobolException.dumpError(_programInstance,_throwableException,false);
}
Context.applicationExit();
}

public transient Context _context;

public Context setup(Context _passContext)
{
_context=_passContext;
if(_context==null) // create fresh context
{
_context=new Context(_passContext,_programId,this);
}
else
    _context.setupContext(_passContext,_programId,this);
wrk=(Wrk)_context.getWrk();
fil=(Fil)_context.getFil();
boolean doDeclareWrk=false;
boolean doDeclareFil=false;
if(wrk==null)
{
doDeclareWrk=true;
_context.setWrk(wrk=new Wrk());
}
if(fil==null)
{
doDeclareFil=true;
_context.setFil(fil=new Fil());
}
if(doDeclareWrk) wrk.doDeclarations();
if(doDeclareFil) fil.doDeclarations();
if(doDeclareFil) _declareFiles();
return _context;
}

public void cancel() // close open files, chance for custom action
{
fil.planningfile.init();
} // end cancel

public void perform(int _procedure) // CobolInterface
{
perform(_procedure,_procedure); // only procedure
}

public void perform(int _begin,int _end) // CobolInterface
{
try
{
for(;;) // forever until stopped
{
switch(_begin)
{

case 0: // Initial Paragraph
case 1: begin();
if(_end==_begin_Label) return;

case 2: fillineventdata();
if(_end==_fillineventdata_Label) return;

default: throw new ExitProgramException();
} // end switch
} // end forever
}
catch(UnwindException _unwindException)
{
perform(_unwindException.unwind(_context,this),_end);
return;
}
catch(ExitProgramException _exitProgramException)
{
throw _exitProgramException;
}
catch(Throwable _runtimeException)
{
int _resumeAt=_exceptionHandler(_runtimeException,false);
if(_resumeAt>0) perform(_resumeAt,_resumeAt);
else throw new ExitProgramException("RESUME AT NEXT STATEMENT from USE EXCEPTION");
}
} // end perform(int,int)

public int _exceptionHandler(Throwable _exception,boolean _nextStatementAvailable)
{
if(_exception instanceof RuntimeException) throw (RuntimeException)_exception;
if(_exception instanceof Error) throw (Error)_exception;
throw new com.legacyj.exception.EcObject(_exception);
}

static public final String _localNameConverter[][]=null;
static public final String _SCONSTANT_0=Variable.codePageToString("Chose key EventId = 1,  EventName = 2, ->");
static public final String _SCONSTANT_1=Variable.codePageToString("Geef de ID voor event in: ");
static public final String _SCONSTANT_2=Variable.codePageToString("Enter Planning event name (40 chars) -> ");
static public final String _SCONSTANT_3=Variable.codePageToString("Enter Date(00/00/0000) :");
static public final String _SCONSTANT_4=Variable.codePageToString("Elaborate description :");
static public final String _SCONSTANT_5=Variable.codePageToString("PLANNING STATUS :- ");
static public final String _SCONSTANT_6=Variable.codePageToString("should work");
static public final String _SCONSTANT_7=Variable.codePageToString("Planning STATUS :- ");
static public final String _SCONSTANT_8=Variable.codePageToString("Planning event name is ");
static public final Numeric _NCONSTANT_0=(Numeric)(new Numeric("1"));
static public final Numeric _NCONSTANT_1=(Numeric)(new Numeric("2"));
static public final Bignum _BCONSTANT_0=new Bignum("1");

} // end program planningsdata